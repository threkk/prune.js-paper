@ARTICLE{10.1109/PROC.1980.11805,
    author={M. M. Lehman},
    journal={Proceedings of the IEEE},
    title={Programs, life cycles, and laws of software evolution},
    year={1980},
    volume={68},
    number={9},
    pages={1060-1076},
    keywords={Application software;Automatic programming;Computer applications;Economic indicators;Environmental economics;Fabrics;Helium;Microprocessors;Productivity;Software maintenance},
    doi={10.1109/PROC.1980.11805},
    ISSN={0018-9219},
    month={Sept},
}

@book{keith2011dom,
  title={DOM scripting: web design with JavaScript and the Document Object Model},
  author={Keith, Jeremy and Sambells, Jeffrey},
  year={2011},
  publisher={Apress}
}

@webpage{JSHisMDN,
  author = {Mozilla and individual contributors},
  title = {JavaScript},
  year = 2019,
  url = {https://developer.mozilla.org/en-US/docs/Glossary/JavaScript},
  urldate = {2019-02-03},
}

@webpage{IEBrokenWeb,
    author = {Chris Wilson},
    title = {ECMASCript 3 and Beyond},
    year = 2007,
    url = {https://blogs.msdn.microsoft.com/ie/2007/10/30/ecmascript-3-and-beyond/#5788577},
    urldate = {2019-02-03},
}

@webpage{TC39Oslo,
    author = {Brendan Eich},
    title = {ECMAScript Harmony},
    year = 2008,
    month = {August},
    url = {https://mail.mozilla.org/pipermail/es-discuss/2008-August/003400.html},
    urldate = {2019-02-03},
}

@ARTICLE{MultistudyDeadCode,
    author = {Simone Romano and Christopher Vendome and Giuseppe Scanniello and Denys Poshyvanyk},
    journal = {IEEE Transactions on Software Engineering},
    title = "{A Multi-study Investigation Into Dead Code}",
    year = {2018},
    volume = {},
    number = {},
    pages = {1},
    doi = {10.1109/TSE.2018.2842781},
    ISSN = {0098-5589},
}

@webpage{RonJeffriesXP,
    author={Ronald E Jeffries},
    title={You're NOT gonna need it!},
    year={1998},
    month={April},
    url={https://ronjeffries.com/xprog/articles/practices/pracnotneed/},
    urldate={2019-02-11},
}

@inproceedings{DeadCodePHP,
	author        = "Hidde Boomsma and B. V. Hostnet and Hans-Gerhard Groß",
	booktitle     = "{Proceedings of the 28th International Conference on Software Maintenance (ICSM)}",
	doi           = "10.1109/ICSM.2012.6405314",
	isbn          = "978-1-4673-2313-0",
	pages         = "511--515",
	publisher     = "{IEEE Computer Society}",
	title         = "{Dead Code Elimination for Web Systems Written in PHP: Lessons Learned from an Industry Case}",
	year          = 2012,
}

@inproceedings{ICSE-2012-EderJJHVP,
	author        = "Sebastian Eder and Maximilian Junker and Elmar Jürgens and Benedikt Hauptmann and Rudolf Vaas and Karl-Heinz Prommer",
	booktitle     = "{Proceedings of the 34th International Conference on Software Engineering (ICSE)}",
	doi           = "10.1109/ICSE.2012.6227109",
	editor        = "Martin Glinz and Gail C. Murphy and Mauro Pezzè",
	isbn          = "978-1-4673-1067-3",
	pages         = "1102--1111",
	publisher     = "{IEEE}",
	title         = "{How Much does Unused Code Matter for Maintenance?}",
	year          = 2012,
}

@webpage{FowlerSmells,
    author={Ronald E Jeffries},
    title={CodeSmell},
    year={2006},
    month={February},
    url={https://www.martinfowler.com/bliki/CodeSmell.html},
    urldate={2019-02-13},
}

@INPROCEEDINGS{6671299,
author={A. {Yamashita} and L. {Moonen}},
booktitle={2013 20th Working Conference on Reverse Engineering (WCRE)},
title={Do developers care about code smells? An exploratory survey},
year={2013},
volume={},
number={},
pages={242-251},
keywords={program diagnostics;software maintenance;software quality;code decay;code quality;software maintenance problems;code smell detection;code smell removal;Software;Programming;Maintenance engineering;Feature extraction;Encoding;Java;maintainability;code smells;survey;code smell detection;code analysis tools;usability;refactoring},
doi={10.1109/WCRE.2013.6671299},
ISSN={1095-1350},
month={Oct},}

@webpage{MDNTypes,
    author={Mozilla Developer Network Web Docs},
    title={JavaScript data types and data structures},
    year={2019},
    month={January},
    url={https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures},
    urldate={2019-02-17},
}

@webpage{MDNNull,
    author={Mozilla Developer Network Web Docs},
    title={Null},
    year={2015},
    month={November},
    url={https://developer.mozilla.org/en-US/docs/Glossary/Null},
    urldate={2019-02-17},
}

@webpage{MDNUndefined,
    author={Mozilla Developer Network Web Docs},
    title={Undefined},
    year={2018},
    month={December},
    url={https://developer.mozilla.org/en-US/docs/Glossary/Undefined},
    urldate={2019-02-17},
}

@webpage{MDNTruthy,
    author={Mozilla Developer Network Web Docs},
    title={Truthy},
    year={2018},
    month={October},
    url={https://developer.mozilla.org/en-US/docs/Glossary/Truthy},
    urldate={2019-02-17},
}

@webpage{MDNFalsy,
    author={Mozilla Developer Network Web Docs},
    title={Falsy},
    year={2018},
    month={October},
    url={https://developer.mozilla.org/en-US/docs/Glossary/Falsy},
    urldate={2019-02-17},
}

@webpage{MDNProtoType,
    author={Mozilla Developer Network Web Docs},
    title={Inheritance and the prototype chain},
    year={2018},
    month={January},
    url={https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain},
    urldate={2019-02-19},
}

@book{FlanaganDavid2011J:td,
abstract = {A revised and updated edition offers comprehensive coverage of ECMAScript 5 (the new JavaScript language standard) and also the new APIs introduced in HTML5, with chapters on functions and classes completely rewritten and updated to match current best practices and a new chapter on language extensions and subsets.},
publisher = {O'Reilly},
booktitle = {JavaScript : the definitive guide /},
isbn = {9780596805524},
year = {2011},
title = {JavaScript : the definitive guide / David Flanagan.},
edition = {6th ed.},
language = {eng},
address = {Beijing ; Sebastopol, CA},
author = {Flanagan, David},
keywords = {JavaScript (Computer program language) ; Web servers ; Object-oriented programming (Computer science) ; JavaScript (Computer program language) ; Object-oriented programming (Computer science) ; Web servers ; JavaScript (Computer language) ; Web servers ; JAVASCRIPT ; Nonfiction},
lccn = {2011377767},
}

@article{SunKwangwon2017AoJP,
issn = {1557-7341},
abstract = {<p><p>JavaScript has been a <i>de facto</i> standard language for client-side web programs, and now it is expanding its territory to general purpose programs. In this article, we classify the client-side JavaScript research for the last decade or so into six topics: static analysis, dynamic analysis, formalization and reasoning, type safety and JIT optimization, security for web applications, and empirical studies. Because the majority of the research has focused on static and dynamic analyses of JavaScript, we evaluate research trends in the analysis of JavaScript first and then the other topics. Finally, we discuss possible future research directions with open challenges.</p></p>},
journal = {ACM Computing Surveys (CSUR)},
pages = {1--34},
volume = {50},
publisher = {ACM},
number = {4},
year = {2017},
title = {Analysis of JavaScript Programs: Challenges and Research Trends},
language = {eng},
author = {Sun, Kwangwon and Ryu, Sukyoung},
keywords = {Javascript ; Analysis Framework ; Dynamic Analysis ; Security Analysis ; Static Analysis ; Web Applications ; Computer Science},
}

@article{KnoopJens1994Pdce,
issn = {03621340},
journal = {ACM SIGPLAN Notices},
pages = {147--158},
volume = {29},
number = {6},
year = {1994},
title = {Partial dead code elimination},
language = {eng},
author = {Knoop, Jens and Rüthing, Oliver and Steffen, Bernhard},
keywords = {Assignment Motion ; Bit-Vector Data Flow Analyses ; Code Motion ; Data Flow Analysis ; Dead Code Elimination ; Partial Redundancy Elimination ; Program Optimization ; Computer Science;},
}

@inproceedings{DeadCodeXQuery,
	author        = "Pierre Genev{\'e}s and Nabil Laya{\"\i}da",
	booktitle     = "{Proceedings of the 32nd International Conference on Software Engineering (ICSE)}",
	doi           = "10.1145/1810295.1810363",
	editor        = "Jeff Kramer and Judith Bishop and Premkumar T. Devanbu and Sebastián Uchitel",
	isbn          = "978-1-60558-719-6",
	pages         = "305--306",
	publisher     = "{ACM}",
	title         = "{Eliminating Dead-Code from XQuery Programs}",
	volume        = 2,
	year          = 2010,
}

@inproceedings{JavaDeadCode,
series = {SAC '16},
pages = {1538--1541},
volume = {04-08-},
publisher = {ACM},
booktitle = {Proceedings of the 31st Annual ACM Symposium on applied computing},
isbn = {9781450337397},
year = {2016},
title = {A graph-based approach to detect unreachable methods in Java software},
language = {eng},
author = {Romano, Simone and Scanniello, Giuseppe and Sartiani, Carlo and Risi, Michele},
keywords = {Bad Smells ; Software Maintenance ; Unreachable Methods},
}

@inproceedings{JNose,
	author        = "Amin Milani Fard and Ali Mesbah",
	booktitle     = "{Proceedings of the 13th International Working Conference on Source Code Analysis and Manipulation (SCAM)}",
	doi           = "10.1109/SCAM.2013.6648192",
	pages         = "116--125",
	publisher     = "{IEEE}",
	title         = "{JSNOSE: Detecting JavaScript Code Smells}",
	year          = 2013,
}

@inproceedings{tajs2009,
	author        = "Simon Holm Jensen and Anders Møller and Peter Thiemann",
	booktitle     = "{Proceedings of the 16th International Static Analysis Symposium (SAS)}",
	doi           = "10.1007/978-3-642-03237-0_17",
	pages         = "238--255",
	publisher     = "{Springer}",
	series        = "{Lecture Notes in Computer Science}",
	title         = "{Type Analysis for JavaScript}",
	volume        = 5673,
	year          = 2009,
}

@inproceedings{FeldthausAsger2013Ecoa,
	acmid         = "2486887",
	author        = "Asger Feldthaus and Max Schäfer and Manu Sridharan and Julian Dolby and Frank Tip",
	booktitle     = "{Proceedings of the 35th International Conference on Software Engineering (ICSE)}",
	editor        = "David Notkin and Betty H. C. Cheng and Klaus Pohl",
	isbn          = "978-1-4673-3076-3",
	pages         = "752--761",
	publisher     = "{IEEE / ACM}",
	title         = "{Efficient Construction of Approximate Call Graphs for JavaScript IDE Services}",
	year          = 2013,
	doi           = "10.1109/ICSE.2013.6606621",
}

@article{JSAI,
 year = {2014},
 title = {JSAI: Designing a Sound, Configurable, and Efficient Static Analyzer for JavaScript},
 author = {Kashyap, Vineeth and Dewey, Kyle and Kuefner, Ethan A. and Wagner, John and Gibbons, Kevin and Sarracino, John and Wiedermann, Ben and Hardekopf, Ben},
 keywords = {Computer Science - Programming Languages ; F.3.2 ; D.3.1},
}

@article{MadsenMagnus2015Saoe,
issn = {1558-1160},
abstract = {<p><p> Many JavaScript programs are written in an event-driven style. In particular, in server-side Node.js applications, operations involving sockets, streams, and files are typically performed in an asynchronous manner, where the execution of listeners is triggered by events. Several types of programming errors are specific to such event-based programs (e.g., unhandled events, and listeners that are registered too late). We present the event-based call graph, a program representation that can be used to detect bugs related to event handling. We have designed and implemented three analyses for constructing event-based call graphs. Our results show that these analyses are capable of detecting problems reported on StackOverflow. Moreover, we show that the number of false positives reported by the analysis on a suite of small Node.js applications is manageable. </p></p>},
journal = {ACM SIGPLAN Notices},
pages = {505--519},
volume = {50},
publisher = {ACM},
number = {10},
year = {2015},
title = "{Static Analysis of Event-driven Node.js JavaScript Applications}",
language = {eng},
author = {Madsen, Magnus and Tip, Frank and Lhoták, Ondřej},
keywords = {Javascript ; Event-Based Systems ; Static Analysis ; Computer Science},
}

@webpage{WALA,
    author={Manu Sridharan},
    title={T.J. Watson Libraries for Analysis},
    year={2015},
    month={June},
    url={http://wala.sourceforge.net/wiki/index.php/Main_Page},
    urldate={2019-03-18},
}

@webpage{JSWALA,
    author={Manu Sridharan},
    title={WALA analyses and tools that are implemented in JavaScript},
    year={2016},
    month={October},
    url={https://github.com/wala/JS_WALA},
    urldate={2019-03-18},
}

@webpage{ESTree,
    author={Manu Sridharan},
    title={The ESTree Spec},
    year={2019},
    month={March},
    url={https://github.com/estree/estree},
    urldate={2019-03-19},
}

@webpage{Acorn,
    author={Marijn Haverbeke},
    title={Acorn: yet another JavaScript parser},
    year={2012},
    month={October},
    url={http://marijnhaverbeke.nl/blog/acorn.html},
    urldate={2019-03-21}
}

@webpage{Espree,
    author={ESLint Team},
    title={Introducing Espree, an Esprima alternative},
    year={2014},
    month={December},
    url={https://eslint.org/blog/2014/12/espree-esprima},
    urldate={2019-03-21}
}

@webpage{ECMAReleases,
    author={TC39},
    title={ECMAScript 262 Release page},
    year={2021},
    month={March},
    url={https://github.com/tc39/ecma262/releases},
    urldate={2021-03-07}
}

@webpage{WebAssembly,
    author={W3C},
    title={WebAssembly},
    url={https://webassembly.org/},
    urldate={2021-03-21}
}

@inproceedings{lee2012safe,
  title={SAFE: Formal specification and implementation of a scalable analysis framework for ECMAScript},
  author={Lee, Hongki and Won, Sooncheol and Jin, Joonho and Cho, Junhee and Ryu, Sukyoung},
  booktitle={FOOL 2012: 19th International Workshop on Foundations of Object-Oriented Languages},
  pages={96},
  year={2012},
  organization={Citeseer}
}

@INPROCEEDINGS{safewebapp,
author={C. {Park} and S. {Won} and J. {Jin} and S. {Ryu}},
booktitle={2015 30th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
title={Static Analysis of JavaScript Web Applications in the Wild via Practical DOM Modeling (T)},
year={2015},
volume={},
number={},
pages={552-562},
keywords={Java;program debugging;program diagnostics;Web sites;javascript Web application;SAFEWapp;open-source static analysis;Web sites;DOM tree abstraction level;bug detector;Browsers;HTML;Analytical models;Web pages;Internet;Encyclopedias},
doi={10.1109/ASE.2015.27},
ISSN={},
month={Nov},}

@inproceedings{safewapi,
 author = {Bae, SungGyeong and Cho, Hyunghun and Lim, Inho and Ryu, Sukyoung},
 title = {SAFEWAPI: Web API Misuse Detector for Web Applications},
 booktitle = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
 series = {FSE 2014},
 year = {2014},
 isbn = {978-1-4503-3056-5},
 location = {Hong Kong, China},
 pages = {507--517},
 numpages = {11},
 doi = {10.1145/2635868.2635916},
 acmid = {2635916},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {JavaScript, bug detection, static analysis, web application},
}

@inproceedings{ieee_s8330226,
  title={An extensible approach for taming the challenges of JavaScript dead code elimination},
  author={Obbink, Niels Groot and Malavolta, Ivano and Scoccia, Gian Luca and Lago, Patricia},
  booktitle={2018 IEEE 25th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  pages={291--401},
  year={2018},
  organization={IEEE}
}

@INPROCEEDINGS{metaCallGraphs,
  author={Antal, Gábor and Hegedus, Péter and Tóth, Zoltán and Ferenc, Rudolf and Gyimóthy, Tibor},
  booktitle={2018 IEEE 18th International Working Conference on Source Code Analysis and Manipulation (SCAM)}, 
  title={[Research Paper] Static JavaScript Call Graphs: A Comparative Study}, 
  year={2018},
  volume={},
  number={},
  pages={177-186},
  doi={10.1109/SCAM.2018.00028}}
